?elmtrain
dados.vendedor <- read.table("vendedor.csv",
header=TRUE,
sep=";")
attach(dados.vendedor)
dados <-  cbind(dados.vendedor$vendedor,
dados.vendedor$anoExp,
dados.vendedor$scoreIntel,
dados.vendedor$vendas)
colnames(dados) <- c("vendedor",
"anoExp",
"scoreIntel",
"vendas")
#
# Conjunto de Treinamento
#
training.setOriginal <<- dados[1:8, ]
training.set <- training.setOriginal
#scale permite que você coloque o dado em uma escala
training.set <- scale(training.set)
training.set <<- as.data.frame(training.set)
#
# Conjunto de Teste
#
test.setOriginal <<- dados[8:12, ]
test.set <- test.setOriginal
test.set <- scale(test.set)
test.set <<- as.data.frame(test.set)
View(test.setOriginal)
View(test.set)
View(dados)
View(dados.vendedor)
View(test.set)
# ------------------------------------------
# Rede Neural SLFN - ELM - MÃ¡quina de Aprendizado Profundo
# ------------------------------------------
#
# Limpa workspace e variÃ¡veis
#
ls()
rm(list=ls())
graphics.off()
library(elmNN)
library(plotly)
library(StatMeasures)
#
# Funcao - Carregar conjunto de Treinamento e Teste
#
loadDataSet <- function()
{
dados.vendedor <- read.table("vendedor.csv",
header=TRUE,
sep=";")
attach(dados.vendedor)
dados <-  cbind(dados.vendedor$vendedor,
dados.vendedor$anoExp,
dados.vendedor$scoreIntel,
dados.vendedor$vendas)
colnames(dados) <- c("vendedor",
"anoExp",
"scoreIntel",
"vendas")
#
# Conjunto de Treinamento
#
training.setOriginal <<- dados[1:8, ]
training.set <- training.setOriginal
#scale permite que você coloque o dado em uma escala
training.set <- scale(training.set)
training.set <<- as.data.frame(training.set)
#
# Conjunto de Teste
#
test.setOriginal <<- dados[8:12, ]
test.set <- test.setOriginal
test.set <- scale(test.set)
test.set <<- as.data.frame(test.set)
}
#
# Funcao - Ajuste Modelo - Rede Neural ELM
#
fitModelNeuralNetworkELM <- function(training.set)
{
fit.neural.network <- elmtrain(vendas ~
anoExp +
scoreIntel,
data=training.set,
nhid=10,
actfun="purelin")
return(fit.neural.network)
}
#
# Funcao - PrediÃ§Ã£o - Rede Neural ELM
#
predictNeuralNetworkELM <- function(fit.neural.network, test.set)
{
predict.neural.network <- predict(fit.neural.network,newdata=test.set)
return(predict.neural.network)
}
#
# Funcao - ConversÃ£o de valores normalizados em escala para original
#
scaleToOriginal <- function(value, scale.value)
{
s <- scale.value
y.sd = sd(value)
y.mean = mean(value)
original.value = s * y.sd + y.mean
return(original.value)
}
#
# Funcao - Coletar conjunto de Dados - Real vs Previsto
#
getDataSet.RealvsPrevisto <- function(real, previsto,vendedor)
{
previsto.fit = scaleToOriginal(real,previsto)
result = cbind.data.frame(vendedor, real, previsto.fit)
colnames(result) = c("vendedor", "real", "previsto")
return(result)
}
#
# Funcao - Erro Percentual Absoluto MÃ©dio
#
getMape <- function(data.set)
{
mape <- mape(y = data.set[, "real"],
yhat = data.set[, "previsto"])
return(mape*100)
}
#
# Funcao - Visualizar grÃ¡fico do modelo
#
plotNeuralNetworkELM <- function(ds.resultado)
{
f <- list(family = "Verdana", size = 14, color = "#000000")
x <- list( title = "Vendedor", titlefont = f)
y <- list(title = "Venda (R$)", titlefont = f)
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
type = "scatter",
mode = "lines") %>%
layout(xaxis = x, yaxis = y)  %>%
add_trace(y = ~previsto,
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
}
# Carrega conjunto de treinamento e teste
loadDataSet()
fit.neural.network <- fitModelNeuralNetworkELM(training.set)
predict.neural.network <- predictNeuralNetworkELM(fit.neural.network, test.set)
predict.neural.network
#Gerar Conjunto de Dados - Real vs Previsto
real <- test.setOriginal[,"vendas"]
vendedor <- test.setOriginal[,"vendedor"]
previsto <- predict.neural.network
ds.resultado <- getDataSet.RealvsPrevisto(real, previsto,vendedor)
ds.resultado
#Erro Percentual Absoluto MÃ©dio
getMape(ds.resultado)
getMape(ds.resultado)
plotNeuralNetworkELM(ds.resultado)
real <- test.setOriginal[,"vendas"]
vendedor <- test.setOriginal[,"vendedor"]
previsto <- predict.neural.network
ds.resultado <- getDataSet.RealvsPrevisto(real, previsto,vendedor)
getMape(ds.resultado)
install.packages("StatMeasures")
luto MÃ©dio
getMape(ds.resultado)
# ------------------------------------------
# Rede Neural SLFN - ELM - MÃ¡quina de Aprendizado Profundo
# ------------------------------------------
#
# Limpa workspace e variÃ¡veis
#
ls()
rm(list=ls())
graphics.off()
library(elmNN)
library(plotly)
library(StatMeasures)
#
# Funcao - Carregar conjunto de Treinamento e Teste
#
loadDataSet <- function()
{
dados.vendedor <- read.table("vendedor.csv",
header=TRUE,
sep=";")
attach(dados.vendedor)
dados <-  cbind(dados.vendedor$vendedor,
dados.vendedor$anoExp,
dados.vendedor$scoreIntel,
dados.vendedor$vendas)
colnames(dados) <- c("vendedor",
"anoExp",
"scoreIntel",
"vendas")
#
# Conjunto de Treinamento
#
training.setOriginal <<- dados[1:8, ]
training.set <- training.setOriginal
#scale permite que você coloque o dado em uma escala
training.set <- scale(training.set)
training.set <<- as.data.frame(training.set)
#
# Conjunto de Teste
#
test.setOriginal <<- dados[8:12, ]
test.set <- test.setOriginal
test.set <- scale(test.set)
test.set <<- as.data.frame(test.set)
}
#
# Funcao - Ajuste Modelo - Rede Neural ELM
#
fitModelNeuralNetworkELM <- function(training.set)
{
fit.neural.network <- elmtrain(vendas ~
anoExp +
scoreIntel,
data=training.set,
nhid=10,
actfun="purelin")
return(fit.neural.network)
}
#
# Funcao - PrediÃ§Ã£o - Rede Neural ELM
#
predictNeuralNetworkELM <- function(fit.neural.network, test.set)
{
predict.neural.network <- predict(fit.neural.network,newdata=test.set)
return(predict.neural.network)
}
#
# Funcao - ConversÃ£o de valores normalizados em escala para original
#
scaleToOriginal <- function(value, scale.value)
{
s <- scale.value
y.sd = sd(value)
y.mean = mean(value)
original.value = s * y.sd + y.mean
return(original.value)
}
#
# Funcao - Coletar conjunto de Dados - Real vs Previsto
#
getDataSet.RealvsPrevisto <- function(real, previsto,vendedor)
{
previsto.fit = scaleToOriginal(real,previsto)
result = cbind.data.frame(vendedor, real, previsto.fit)
colnames(result) = c("vendedor", "real", "previsto")
return(result)
}
#
# Funcao - Erro Percentual Absoluto MÃ©dio
#
getMape <- function(data.set)
{
mape <- mape(y = data.set[, "real"],
yhat = data.set[, "previsto"])
return(mape*100)
}
#
# Funcao - Visualizar grÃ¡fico do modelo
#
plotNeuralNetworkELM <- function(ds.resultado)
{
f <- list(family = "Verdana", size = 14, color = "#000000")
x <- list( title = "Vendedor", titlefont = f)
y <- list(title = "Venda (R$)", titlefont = f)
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
type = "scatter",
mode = "lines") %>%
layout(xaxis = x, yaxis = y)  %>%
add_trace(y = ~previsto,
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
}
# Carrega conjunto de treinamento e teste
loadDataSet()
#Ajuste Modelo - Rede Neural ELM
fit.neural.network <- fitModelNeuralNetworkELM(training.set)
#PrediÃ§Ã£o - Rede Neural ELM
predict.neural.network <- predictNeuralNetworkELM(fit.neural.network, test.set)
#Gerar Conjunto de Dados - Real vs Previsto
real <- test.setOriginal[,"vendas"]
vendedor <- test.setOriginal[,"vendedor"]
previsto <- predict.neural.network
ds.resultado <- getDataSet.RealvsPrevisto(real, previsto,vendedor)
#Erro Percentual Absoluto MÃ©dio
getMape(ds.resultado)
# Visualizar GrÃ¡fico do Modelo
plotNeuralNetworkELM(ds.resultado)
previsto <- ds.resultado[,"previsto"]
real <- ds.resultado[,"real"]
install.packages("plotly")
plotNeuralNetworkELM(ds.resultado)
plotNeuralNetworkELM(ds.resultado)
plotNeuralNetworkELM(ds.resultado)
f <- list(family = "Verdana", size = 14, color = "#000000")
x <- list( title = "Vendedor", titlefont = f)
y <- list(title = "Venda (R$)", titlefont = f)
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
type = "scatter",
mode = "lines") %>%
layout(xaxis = x, yaxis = y)  %>%
add_trace(y = ~previsto,
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
f <- list(family = "Verdana", size = 14, color = "#000000")
x <- list( title = "Vendedor", titlefont = f)
y <- list(title = "Venda (R$)", titlefont = f)
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
type = "scatter",
mode = "lines")
layout(xaxis = x, yaxis = y)
add_trace(y = ~previsto,
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
add_trace(y = ~previsto,
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
type = "scatter",
mode = "lines")
f <- list(family = "Verdana", size = 14, color = "#000000")
x <- list( title = "Vendedor", titlefont = f)
y <- list(title = "Venda (R$)", titlefont = f)
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
type = "scatter",
mode = "lines")
layout(xaxis = x, yaxis = y)
add_trace(y = ~previsto,
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
# ------------------------------------------
# Rede Neural SLFN - ELM - MÃ¡quina de Aprendizado Profundo
# ------------------------------------------
#
# Limpa workspace e variÃ¡veis
#
ls()
rm(list=ls())
graphics.off()
library(elmNN)
library(plotly)
library(StatMeasures)
#
# Funcao - Carregar conjunto de Treinamento e Teste
#
loadDataSet <- function()
{
dados.vendedor <- read.table("vendedor.csv",
header=TRUE,
sep=";")
attach(dados.vendedor)
dados <-  cbind(dados.vendedor$vendedor,
dados.vendedor$anoExp,
dados.vendedor$scoreIntel,
dados.vendedor$vendas)
colnames(dados) <- c("vendedor",
"anoExp",
"scoreIntel",
"vendas")
#
# Conjunto de Treinamento
#
training.setOriginal <<- dados[1:8, ]
training.set <- training.setOriginal
#scale permite que você coloque o dado em uma escala
training.set <- scale(training.set)
training.set <<- as.data.frame(training.set)
#
# Conjunto de Teste
#
test.setOriginal <<- dados[8:12, ]
test.set <- test.setOriginal
test.set <- scale(test.set)
test.set <<- as.data.frame(test.set)
}
#
# Funcao - Ajuste Modelo - Rede Neural ELM
#
fitModelNeuralNetworkELM <- function(training.set)
{
fit.neural.network <- elmtrain(vendas ~
anoExp +
scoreIntel,
data=training.set,
nhid=10,
actfun="purelin")
return(fit.neural.network)
}
#
# Funcao - PrediÃ§Ã£o - Rede Neural ELM
#
predictNeuralNetworkELM <- function(fit.neural.network, test.set)
{
predict.neural.network <- predict(fit.neural.network,newdata=test.set)
return(predict.neural.network)
}
#
# Funcao - ConversÃ£o de valores normalizados em escala para original
#
scaleToOriginal <- function(value, scale.value)
{
s <- scale.value
y.sd = sd(value)
y.mean = mean(value)
original.value = s * y.sd + y.mean
return(original.value)
}
#
# Funcao - Coletar conjunto de Dados - Real vs Previsto
#
getDataSet.RealvsPrevisto <- function(real, previsto,vendedor)
{
previsto.fit = scaleToOriginal(real,previsto)
result = cbind.data.frame(vendedor, real, previsto.fit)
colnames(result) = c("vendedor", "real", "previsto")
return(result)
}
#
# Funcao - Erro Percentual Absoluto MÃ©dio
#
getMape <- function(data.set)
{
mape <- mape(y = data.set[, "real"],
yhat = data.set[, "previsto"])
return(mape*100)
}
#
# Funcao - Visualizar grÃ¡fico do modelo
#
plotNeuralNetworkELM <- function(ds.resultado)
{
f <- list(family = "Verdana", size = 14, color = "#000000")
x <- list( title = "Vendedor", titlefont = f)
y <- list(title = "Venda (R$)", titlefont = f)
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
}
# Carrega conjunto de treinamento e teste
loadDataSet()
#Ajuste Modelo - Rede Neural ELM
fit.neural.network <- fitModelNeuralNetworkELM(training.set)
#PrediÃ§Ã£o - Rede Neural ELM
predict.neural.network <- predictNeuralNetworkELM(fit.neural.network, test.set)
#Gerar Conjunto de Dados - Real vs Previsto
real <- test.setOriginal[,"vendas"]
vendedor <- test.setOriginal[,"vendedor"]
previsto <- predict.neural.network
ds.resultado <- getDataSet.RealvsPrevisto(real, previsto,vendedor)
#Erro Percentual Absoluto MÃ©dio
getMape(ds.resultado)
# Visualizar GrÃ¡fico do Modelo
plotNeuralNetworkELM(ds.resultado)
previsto <- ds.resultado[,"previsto"]
real <- ds.resultado[,"real"]
f <- list(family = "Verdana", size = 14, color = "#000000")
x <- list( title = "Vendedor", titlefont = f)
y <- list(title = "Venda (R$)", titlefont = f)
p <- plot_ly(as.data.frame(ds.resultado),
x = ~vendedor,
y = ~real,
name = "Real",
type = "scatter",
mode = "lines") %>%
layout(xaxis = x, yaxis = y)  %>%
add_trace(y = ~previsto,
line = list(color = 'rgb(255, 87, 34)', width = 3),
name = "Modelo Rede Neural SLFN - ELM",
connectgaps = TRUE)
p
