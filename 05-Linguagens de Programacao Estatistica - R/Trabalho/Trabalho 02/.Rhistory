library(bnlearn)
library(bnviewer)
dados.vendas <- read.csv("food-sp.csv", header=TRUE)
dados.vendas = as.data.frame(dados.vendas)
dados.vendas[is.na(dados.vendas)] <- 0
dados.vendas$PROJETO.CAFE[dados.vendas$PROJETO.CAFE == 0] <- mean(dados.vendas$PROJETO.CAFE)
dados.vendas$BRINDE[dados.vendas$BRINDE == 0] <- mean(dados.vendas$BRINDE)
dados.vendas = dados.vendas[, c(
'GELADO.E.MILK.SHAKE',
'SANDUICHE',
'BEBIDA',
'ACOMPANHAMENTO',
'ADICIONAL',
'PROJETO.CAFE',
'BRINDE',
'PRATO',
'VENDA'
)]
dados.vendas
dados.vendas
View(dados.vendas)
install.packages("bnviewer")
alarmDataFrame <- data.frame(alarm)
res <- hc(alarmDataFrame)
res
dados.vendas <- read.csv("food-sp.csv", header=TRUE)
dados.vendas
View(dados.vendas)
View(dados.vendas)
bayesianNetwork.boot.strength = boot.strength(dados.vendas, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
strength.viewer(
avg.bayesianNetwork ,
bayesianNetwork.boot.strength ,
bayesianNetwork.arc.strength.threshold.expression.color = " @threshold >= 0.95 & @threshold <= 1 " ,
bayesianNetwork.arc.strength.threshold.color = " # f4bafd" ,
bayesianNetwork.arc.strength.label = TRUE ,
bayesianNetwork.arc.strength.label.prefix = "" ,
bayesianNetwork.arc.strength.label.color = "black" ,
bayesianNetwork.arc.strength.tooltip = TRUE ,
bayesianNetwork.edge.scale.min = 1 ,
bayesianNetwork.edge.scale.max = 5 ,
bayesianNetwork.edge.scale.label.min = 14 ,
bayesianNetwork.edge.scale.label.max = 14 ,
bayesianNetwork.width = "100%" ,
bayesianNetwork.height = "800px" ,
bayesianNetwork.layout = "layout_with_sugiyama" ,
node.colors = list ( background = " #97c2fc" ,
border = " #2b7ce9" ,
highlight = list ( background = " #f4bafd" ,
border = " #2b7ce9" )),
edges.dashes = TRUE
)
View(dados.vendas)
View(dados.vendas)
install.packages("bnviewer")
library(bnlearn)
library(bnviewer)
dados.vendas <- read.csv("food-sp.csv", header=TRUE)
dados.vendas = as.data.frame(dados.vendas)
dados.vendas[is.na(dados.vendas)] <- 0
dados.vendas$PROJETO.CAFE[dados.vendas$PROJETO.CAFE == 0] <- mean(dados.vendas$PROJETO.CAFE)
dados.vendas$BRINDE[dados.vendas$BRINDE == 0] <- mean(dados.vendas$BRINDE)
dados.vendas = dados.vendas[, c(
'GELADO.E.MILK.SHAKE',
'SANDUICHE',
'BEBIDA',
'ACOMPANHAMENTO',
'ADICIONAL',
'PROJETO.CAFE',
'BRINDE',
'PRATO',
'VENDA'
)]
#ANALISAR DISTRIBUIÇÃO DE PROBABILIDADE DE TODAS AS VARIÃVEIS
#CRIAR UMA REDE BAYESIANA - FUNÃÃO VIEWER
#ANALISAR NÃS MAIS IMPORTANTES - FUNÃÃO VIEWER
bayesianNetwork.boot.strength = boot.strength(dados.vendas, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
strength.viewer(
avg.bayesianNetwork ,
bayesianNetwork.boot.strength ,
bayesianNetwork.arc.strength.threshold.expression.color = " @threshold >= 0.95 & @threshold <= 1 " ,
bayesianNetwork.arc.strength.threshold.color = " # f4bafd" ,
bayesianNetwork.arc.strength.label = TRUE ,
bayesianNetwork.arc.strength.label.prefix = "" ,
bayesianNetwork.arc.strength.label.color = "black" ,
bayesianNetwork.arc.strength.tooltip = TRUE ,
bayesianNetwork.edge.scale.min = 1 ,
bayesianNetwork.edge.scale.max = 5 ,
bayesianNetwork.edge.scale.label.min = 14 ,
bayesianNetwork.edge.scale.label.max = 14 ,
bayesianNetwork.width = "100%" ,
bayesianNetwork.height = "800px" ,
bayesianNetwork.layout = "layout_with_sugiyama" ,
node.colors = list ( background = " #97c2fc" ,
border = " #2b7ce9" ,
highlight = list ( background = " #f4bafd" ,
border = " #2b7ce9" )),
edges.dashes = TRUE
)
bayesianNetwork.boot.strength = boot.strength(dados.vendas, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
strength.viewer(
avg.bayesianNetwork ,
bayesianNetwork.boot.strength ,
bayesianNetwork.arc.strength.threshold.expression.color = " @threshold >= 0.95 & @threshold <= 1 " ,
bayesianNetwork.arc.strength.threshold.color = " # f4bafd" ,
bayesianNetwork.arc.strength.label = TRUE ,
bayesianNetwork.arc.strength.label.prefix = "" ,
bayesianNetwork.arc.strength.label.color = "black" ,
bayesianNetwork.arc.strength.tooltip = TRUE ,
bayesianNetwork.edge.scale.min = 1 ,
bayesianNetwork.edge.scale.max = 5 ,
bayesianNetwork.edge.scale.label.min = 14 ,
bayesianNetwork.edge.scale.label.max = 14 ,
bayesianNetwork.width = "100%" ,
bayesianNetwork.height = "800px" ,
bayesianNetwork.layout = "layout_with_sugiyama" ,
node.colors = list ( background = " #97c2fc" ,
border = " #2b7ce9" ,
highlight = list ( background = " #f4bafd" ,
border = " #2b7ce9" )),
edges.dashes = TRUE
)
library (bnlearn)
library (bnviewer)
data ("coronary")
bayesianNetwork.boot.strength = boot.strength(coronary, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
strength.viewer(
avg.bayesianNetwork ,
bayesianNetwork.boot.strength ,
bayesianNetwork.arc.strength.threshold.expression.color = " @threshold >= 0.95 & @threshold <= 1 " ,
bayesianNetwork.arc.strength.threshold.color = " # f4bafd" ,
bayesianNetwork.arc.strength.label = TRUE ,
bayesianNetwork.arc.strength.label.prefix = "" ,
bayesianNetwork.arc.strength.label.color = "black" ,
bayesianNetwork.arc.strength.tooltip = TRUE ,
bayesianNetwork.edge.scale.min = 1 ,
bayesianNetwork.edge.scale.max = 5 ,
bayesianNetwork.edge.scale.label.min = 14 ,
bayesianNetwork.edge.scale.label.max = 14 ,
bayesianNetwork.width = "100%" ,
bayesianNetwork.height = "800px" ,
bayesianNetwork.layout = "layout_with_sugiyama" ,
node.colors = list ( background = " #97c2fc" ,
border = " #2b7ce9" ,
highlight = list ( background = " #f4bafd" ,
border = " #2b7ce9" )),
edges.dashes = TRUE
)
setwd("C:/Users/Gustavo Primolan/Desktop/Gustavo BACKUP/MBA Data Science & Machine Learning/05-Linguagens de Programacao Estatistica - R/Trabalho/Trabalho 02")
library(bnlearn)
library(bnviewer)
dados.vendas <- read.csv("food-sp.csv", header=TRUE)
dados.vendas = as.data.frame(dados.vendas)
dados.vendas[is.na(dados.vendas)] <- 0
dados.vendas$PROJETO.CAFE[dados.vendas$PROJETO.CAFE == 0] <- mean(dados.vendas$PROJETO.CAFE)
dados.vendas$BRINDE[dados.vendas$BRINDE == 0] <- mean(dados.vendas$BRINDE)
dados.vendas = dados.vendas[, c(
'GELADO.E.MILK.SHAKE',
'SANDUICHE',
'BEBIDA',
'ACOMPANHAMENTO',
'ADICIONAL',
'PROJETO.CAFE',
'BRINDE',
'PRATO',
'VENDA'
)]
#ANALISAR DISTRIBUIÇÃO DE PROBABILIDADE DE TODAS AS VARIÃVEIS
#CRIAR UMA REDE BAYESIANA - FUNÃÃO VIEWER
#ANALISAR NÃS MAIS IMPORTANTES - FUNÃÃO VIEWER
bayesianNetwork.boot.strength = boot.strength(dados.vendas, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
strength.viewer(
avg.bayesianNetwork ,
bayesianNetwork.boot.strength ,
bayesianNetwork.arc.strength.threshold.expression.color = " @threshold >= 0.95 & @threshold <= 1 " ,
bayesianNetwork.arc.strength.threshold.color = " # f4bafd" ,
bayesianNetwork.arc.strength.label = TRUE ,
bayesianNetwork.arc.strength.label.prefix = "" ,
bayesianNetwork.arc.strength.label.color = "black" ,
bayesianNetwork.arc.strength.tooltip = TRUE ,
bayesianNetwork.edge.scale.min = 1 ,
bayesianNetwork.edge.scale.max = 5 ,
bayesianNetwork.edge.scale.label.min = 14 ,
bayesianNetwork.edge.scale.label.max = 14 ,
bayesianNetwork.width = "100%" ,
bayesianNetwork.height = "800px" ,
bayesianNetwork.layout = "layout_with_sugiyama" ,
node.colors = list ( background = " #97c2fc" ,
border = " #2b7ce9" ,
highlight = list ( background = " #f4bafd" ,
border = " #2b7ce9" )),
edges.dashes = TRUE
)
install.packages("bnviewer")
)]
viewer(bn.learn.hc,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_in_circle",
bayesianNetwork.title = "Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout in circle",
node.colors = list(background = "red", border = "black",
highlight = list(background = "black",
border = "red"))
)
setwd("C:/Users/Gustavo Primolan/Desktop/Gustavo BACKUP/MBA Data Science & Machine Learning/05-Linguagens de Programacao Estatistica - R/Trabalho/Trabalho 02")
viewer(bn.learn.hc,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_in_circle",
bayesianNetwork.title = "Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout in circle",
node.colors = list(background = "red", border = "black",
highlight = list(background = "black",
border = "red"))
)
install.packages("bnviewer")
library(bnlearn)
library(bnviewer)
dados.vendas <- read.csv("food-sp.csv", header=TRUE)
dados.vendas = as.data.frame(dados.vendas)
dados.vendas[is.na(dados.vendas)] <- 0
dados.vendas$PROJETO.CAFE[dados.vendas$PROJETO.CAFE == 0] <- mean(dados.vendas$PROJETO.CAFE)
dados.vendas$BRINDE[dados.vendas$BRINDE == 0] <- mean(dados.vendas$BRINDE)
dados.vendas = dados.vendas[, c(
'GELADO.E.MILK.SHAKE',
'SANDUICHE',
'BEBIDA',
'ACOMPANHAMENTO',
'ADICIONAL',
'PROJETO.CAFE',
'BRINDE',
'PRATO',
'VENDA'
)]
#ANALISAR DISTRIBUIÇÃO DE PROBABILIDADE DE TODAS AS VARIÃVEIS
#CRIAR UMA REDE BAYESIANA - FUNÃÃO VIEWER
#ANALISAR NÃS MAIS IMPORTANTES - FUNÃÃO VIEWER
bayesianNetwork.boot.strength = boot.strength(dados.vendas, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
viewer(bn.learn.hc,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_in_circle",
bayesianNetwork.title = "Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout in circle",
node.colors = list(background = "red", border = "black",
highlight = list(background = "black",
border = "red"))
)
library(bnlearn)
library(bnviewer)
dados.vendas <- read.csv("food-sp.csv", header=TRUE)
dados.vendas = as.data.frame(dados.vendas)
dados.vendas[is.na(dados.vendas)] <- 0
dados.vendas$PROJETO.CAFE[dados.vendas$PROJETO.CAFE == 0] <- mean(dados.vendas$PROJETO.CAFE)
dados.vendas$BRINDE[dados.vendas$BRINDE == 0] <- mean(dados.vendas$BRINDE)
dados.vendas = dados.vendas[, c(
'GELADO.E.MILK.SHAKE',
'SANDUICHE',
'BEBIDA',
'ACOMPANHAMENTO',
'ADICIONAL',
'PROJETO.CAFE',
'BRINDE',
'PRATO',
'VENDA'
)]
#ANALISAR DISTRIBUIÇÃO DE PROBABILIDADE DE TODAS AS VARIÃVEIS
#CRIAR UMA REDE BAYESIANA - FUNÃÃO VIEWER
#ANALISAR NÃS MAIS IMPORTANTES - FUNÃÃO VIEWER
bayesianNetwork.boot.strength = boot.strength(dados.vendas, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
viewer(avg.bayesianNetwork,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_in_circle",
bayesianNetwork.title = "Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout in circle",
node.colors = list(background = "red", border = "black",
highlight = list(background = "black",
border = "red"))
)
viewer(avg.bayesianNetwork,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_in_circle",
bayesianNetwork.title = "Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout in circle",
node.colors = list(background = "red", border = "black",
highlight = list(background = "black",
border = "red"))
)
View(dados.vendas)
View(dados.vendas)
read.csv("food-sp.csv", header=TRUE)
teste <- read.csv("food-sp.csv", header=TRUE)
dados.vendas <- read.csv("food-sp.csv", header=TRUE)
dados.vendas = as.data.frame(dados.vendas)
dados.vendas[is.na(dados.vendas)] <- 0
dados.vendas$PROJETO.CAFE[dados.vendas$PROJETO.CAFE == 0] <- mean(dados.vendas$PROJETO.CAFE)
dados.vendas$BRINDE[dados.vendas$BRINDE == 0] <- mean(dados.vendas$BRINDE)
dados.vendas = dados.vendas[, c(
'GELADO.E.MILK.SHAKE',
'SANDUICHE',
'BEBIDA',
'ACOMPANHAMENTO',
'ADICIONAL',
'PROJETO.CAFE',
'BRINDE',
'PRATO',
'VENDA'
)]
#ANALISAR DISTRIBUIÇÃO DE PROBABILIDADE DE TODAS AS VARIÃVEIS
#CRIAR UMA REDE BAYESIANA - FUNÃÃO VIEWER
#ANALISAR NÃS MAIS IMPORTANTES - FUNÃÃO VIEWER
bayesianNetwork.boot.strength = boot.strength(dados.vendas, R = 10 ,
algorithm = "hc" ,
nrow ( data ),
cpdag = TRUE ,
debug = FALSE )
bayesianNetwork.boot.strength[( bayesianNetwork.boot.strength$strength > 0.95 ) &
( bayesianNetwork.boot.strength$direction <= 1 ), ]
avg.bayesianNetwork = averaged.network ( bayesianNetwork.boot.strength )
viewer(avg.bayesianNetwork,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_in_circle",
bayesianNetwork.title = "Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout in circle",
node.colors = list(background = "red", border = "black",
highlight = list(background = "black",
border = "red"))
)
View(teste)
View(teste)
View(teste)
